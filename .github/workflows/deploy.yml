# Имя флоу
name: Deploy on server hw15

# Когда действие запустится (триггеры)
on:
  push:
    # при push в main
    branches: [ main ]

  pull_request:
    # при создании pull request на main
    branches: [ main ]

# Что будем делать (экшены)
jobs:
  # Имя действия, придумываем сами
  integration-tests:
    # На какой ОС будет работать виртуальная машина
    # Можно выбрать Ubuntu, Windows Server или macOS
    runs-on: ubuntu-latest
    # Шаги действия
    steps:
      # Шаг 1: собираем сервисы в режиме тестирования
      - uses: actions/checkout@v3
      - name: Build the stack
        run: docker-compose -f docker-compose.yaml up -d --build

      # Шаг 2: собираем проект с тестами
      - name: Build tests
        run: echo 'Здесь должны быть тесты!'
#        run: dotnet build GOT.Tests
#
#      # Шаг 3: запускаем тесты с небольшой детализацией
#      - name: Run tests
#        run: dotnet test LOT.Tests --verbosity normal
#      - name: "Run deploy on server"
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SERVER_KEY }}
#          port: ${{ secrets.SERVER_PORT }}
##        run: docker-compose -f docker-compose.yaml up -d --build
#          script: |
#            whoami
#            ls -al
#             docker-compose -f docker-compose.yaml up --build -d
#            sudo docker-compose -f docker-compose.prod-ci.yml -p prod pull
#            sudo docker-compose -f docker-compose.prod-ci.yml -p prod up -d
  deploy:
    needs: integration-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Run command on remote server
      uses: D3rHase/ssh-command-action@v0.2.2
      with:
        host: ${{secrets.SERVER_HOST}}
        user: ${{secrets.SERVER_USERNAME}}
        private_key: ${{secrets.SSH_PRIVATE_KEY}}
        command: |
          cd ${{ secrets.PROJECT_FOLDER }};
          git checkout main;
          git pull;
          docker-compose --file docker-compose.yml down;
          docker-compose --file docker-compose.yml up -d;
#          docker system prune --all --force;